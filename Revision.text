🔹| Round                            | What to Expect                                  | How to Prepare                                                |
| -------------------------------- | ----------------------------------------------- | ------------------------------------------------------------- |
| **Round 1: Screening**           | HR or basic intro questions                     | Prepare your self-intro, show interest in product & data      |
| **Round 2: Aptitude + SQL Test** | SQL queries, Excel problem solving              | Practice on LeetCode (Easy SQL), Pivot Tables in Excel        |
| **Round 3: Product Round**       | A/B testing, funnels, metrics, product thinking | Learn frameworks: AAARRR (Awareness → Revenue), A/B test case |
| **Round 4: Behavioral**          | “Why Product Analytics?”, “Teamwork challenges” | Be ready with 1–2 stories (STAR method), career goals         |
.................................................................................................................
 Day 1 – Basics (DDL + DML)
| 🔧 Command     | 🔤 Purpose                 | 📝 Example                                         |
| -------------- | -------------------------- | -------------------------------------------------- |
| `CREATE TABLE` | Create a new table         | `CREATE TABLE Students (...)`                      |
| `INSERT INTO`  | Add new data rows          | `INSERT INTO Students (name, age) VALUES (...)`    |
| `SELECT`       | Retrieve data from a table | `SELECT * FROM Students`                           |
| `UPDATE`       | Modify existing data       | `UPDATE Students SET age = 24 WHERE name = 'Amit'` |
| `DELETE`       | Remove rows from a table   | `DELETE FROM Students WHERE name = 'Sneha'`        |
....................................................................................................
🔹 🔹 Day 2 – Aggregate Functions
| 🛠️ Function      | 🎯 Use Case                 | ✅ Example                                   |
| ----------------- | --------------------------- | ------------------------------------------- |
| `COUNT()`         | Total number of rows        | `SELECT COUNT(*) FROM Orders`               |
| `SUM()`           | Add up a column’s values    | `SELECT SUM(quantity * price) FROM Orders`  |
| `AVG()`           | Calculate average           | `SELECT AVG(price) FROM Orders`             |
| `MIN()` / `MAX()` | Find lowest / highest value | `SELECT MIN(price), MAX(price) FROM Orders` |
| `GROUP BY`        | Aggregate by category       | `GROUP BY customer_name`                    |
| `HAVING`          | Filter groups               | `HAVING SUM(amount) > 1000`                 |
.................................................................................................
🔹 Day 3 – Joins
| 🔗 Join Type              | 📘 Description                                   | 🧪 Example                      |
| ------------------------- | ------------------------------------------------ | ------------------------------- |
| `INNER JOIN`              | Returns matching records from both tables        | Customers with orders           |
| `LEFT JOIN`               | All records from left table, matching from right | All customers, even if no order |
| `RIGHT JOIN`              | All records from right table, matching from left | All orders, even if no customer |
| `FULL JOIN` (via `UNION`) | Combines `LEFT JOIN` + `RIGHT JOIN`              | All records from both sides     |
| `SELF JOIN`               | Join the table to itself                         | Employees & their Managers      |
............................................................................................................
🔹 Day 4 – Subqueries
| Type                | Use Case               | Example                                               |
| ------------------- | ---------------------- | ----------------------------------------------------- |
| Scalar Subquery     | Single value           | `WHERE salary = (SELECT MAX(salary) ...)`             |
| `IN` Subquery       | Multiple matches       | `WHERE dept IN (SELECT dept ... HAVING COUNT(*) > 1)` |
| `EXISTS`            | True/False check       | `WHERE EXISTS (SELECT 1 FROM Employees ...)`          |
| Correlated Subquery | Depends on outer query | `WHERE salary > (SELECT AVG(...) WHERE dept = dept)`  |
| Nested Subquery     | Multiple levels        | Find 2nd highest salary                               |

🔹 Day 5 – Set Operators| Operator                               | Use Case                  | SQL Syntax                                        |
| -------------------------------------- | ------------------------- | ------------------------------------------------- |
| `UNION`                                | Merge & remove duplicates | `SELECT name FROM A UNION SELECT name FROM B`     |
| `UNION ALL`                            | Merge & keep duplicates   | `SELECT name FROM A UNION ALL SELECT name FROM B` |
| `INTERSECT` (MySQL uses JOIN)          | Common values             | `A INNER JOIN B ON A.name = B.name`               |
| `EXCEPT` (MySQL uses LEFT JOIN + NULL) | In A but not in B         | `LEFT JOIN B ... WHERE B.name IS NULL`            |


✅ You Now Know:

1.How to create and manipulate tables (Day 1)
2.How to summarize data with aggregate functions (Day 2)
3.How to work with multiple tables using joins (Day 3)
......................................................
| Day | Topic                        | Status   |
|-----|------------------------------|----------|
| 1   | Basics (CRUD)                | ✅ Done  |
| 2   | Aggregate Functions          | ✅ Done  |
| 3   | Joins                        | ✅ Done  |
| 4   | Subqueries                   | ✅ Done  |
| 5   | Set Operators                | ✅ Done  |
| 6   | CASE Statements & Logic      | ✅ Done  |
| 7   | Views & Indexes              | ✅ Done  |
| 8   | Constraints & Keys           | ✅ Done  |
| 9   | Table Management             | ✅ Done  |
| 10  | Transactions (COMMIT/ROLLBACK/SAVEPOINT) | ✅ Done |



| Constraint      | Purpose                                | Example                   |
| --------------- | -------------------------------------- | ------------------------- |
| **PRIMARY KEY** | Unique identifier for a row            | `student_id`              |
| **NOT NULL**    | Field must have a value                | `name NOT NULL`           |
| **UNIQUE**      | No duplicate values                    | `email UNIQUE`            |
| **CHECK**       | Enforces condition                     | `CHECK(age >= 18)`        |
| **DEFAULT**     | Assigns default value if none is given | `DEFAULT 'Unknown'`       |
| **FOREIGN KEY** | Links two tables                       | `FOREIGN KEY(student_id)` |
..........................................................................................
| Command       | Purpose                                      | Example                           |
| ------------- | -------------------------------------------- | --------------------------------- |
| `ALTER TABLE` | Add, modify, or remove columns               | `ALTER TABLE ... ADD column_name` |
| `TRUNCATE`    | Quickly delete all rows (faster than DELETE) | `TRUNCATE TABLE Employees`        |
| `DELETE`      | Remove rows (can use WHERE clause)           | `DELETE FROM Employees WHERE ...` |
| `DROP TABLE`  | Remove table structure & data permanently    | `DROP TABLE Employees`            |
........................................................................................
| Command             | Purpose                               |
| ------------------- | ------------------------------------- |
| `START TRANSACTION` | Begins a transaction block            |
| `COMMIT`            | Saves all changes permanently         |
| `ROLLBACK`          | Undoes all changes in the transaction |
| `SAVEPOINT`         | Creates a point to roll back to       |
| `ROLLBACK TO`       | Undo operations after a savepoint     |
.............................................................................................................................
Interview questions
Question 1: Match Products with Prices
Concepts Used:
CTE (Common Table Expressions) – WITH t1 AS (...) helps create temporary result sets.
ROW_NUMBER() Window Function – Assigns a unique sequential number to rows, since no key column is available for joining.
JOIN – Combines rows of both tables based on assigned row numbers.
How to Solve:
Assign row numbers to both tables using ROW_NUMBER() OVER ().
Join on these row numbers to match products with prices in the same order.
Key SQL Areas:
Window Functions
CTEs
JOIN Operations
.............................................................................................................................
Question 2 Recap

We have two tables with duplicates and NULL values:
id
---
1
1
1
2
2
NULL
NULL
3
5
TABLE
id
---
1
1
2
2
NULL
NULL
4
5
6
We need to find the number of rows returned by different joins.